---
name: tmux
run-name: tmux-${{inputs.tmux}}

on:
  workflow_dispatch:
    inputs:
      tmux:
        required: true
        description: tmux version
        default: 3.3a
        type: string

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    name: tmux ${{inputs.tmux}}
    steps:
      - uses: actions/checkout@main

      - name: Get musl version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "musl=$(gh api /repos/bminor/musl/tags --jq '.[0].name')" >> $GITHUB_ENV

      - name: Get libevent version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="$(gh api /repos/libevent/libevent/releases/latest --jq .tag_name)"
          echo "libevent=${VERSION#release-}" >> $GITHUB_ENV

      - name: Get ncurses version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ncurses=$(gh api /repos/mirror/ncurses/tags --jq '.[0].name')" >> $GITHUB_ENV

      - name: Get upx version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "upx=$(gh api /repos/upx/upx/tags --jq '.[0].name')" >> $GITHUB_ENV

      - name: Print versions
        run: |
          echo "musl=${{env.musl}}"
          echo "libevent=${{env.libevent}}"
          echo "ncurses=${{env.ncurses}}"
          echo "upx=${{env.upx}}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login to GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@master
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          build-args: |
            MUSL_VERSION=${{env.musl}}
            LIBEVENT_VERSION=${{env.libevent}}
            NCURSES_VERSION=${{env.ncurses}}
            TMUX_VERSION=${{inputs.tmux}}
            UPX_VERSION=${{env.upx}}
          push: false
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:tmux-${{inputs.tmux}}
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}:tmux-${{inputs.tmux}},mode=max
          outputs: type=local,dest=./

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          ls -R
          gh release create "${{inputs.tmux}}" --notes "build tmux-${{inputs.tmux}} with:<br>musl: ${{env.musl}}<br>libevent: ${{env.libevent}}<br>ncurses: ${{env.ncurses}}<br>tmux: ${{inputs.tmux}}<br><br>Compressed with upx ${{env.upx}}" --title "tmux-${{inputs.tmux}}" --repo "${{github.repository}}" || true
          gh release edit "${{inputs.tmux}}" --notes "build tmux-${{inputs.tmux}} with:<br>musl: ${{env.musl}}<br>libevent: ${{env.libevent}}<br>ncurses: ${{env.ncurses}}<br>tmux: ${{inputs.tmux}}<br><br>Compressed with upx ${{env.upx}}" --title "tmux-${{inputs.tmux}}" --repo "${{github.repository}}" || true
          gh release delete-asset "${{inputs.tmux}}" "tmux" --yes --repo "${{github.repository}}" || true
          gh release upload "${{inputs.tmux}}" "./tmux" --repo "${{github.repository}}"
          gh release delete-asset "${{inputs.tmux}}" "tmux-upx" --yes --repo "${{github.repository}}" || true
          gh release upload "${{inputs.tmux}}" "./tmux-upx" --repo "${{github.repository}}"
